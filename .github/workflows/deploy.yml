name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Install Docker on EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "if ! command -v docker &> /dev/null; then sudo apt-get update && sudo apt-get install -y docker.io && sudo systemctl enable docker && sudo systemctl start docker; fi"

    - name: Install Docker Compose on EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "if ! command -v docker-compose &> /dev/null; then sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose; fi"

    - name: Deploy code using a fresh clone approach
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Create a temporary directory for the fresh clone
          TEMP_DIR=$(mktemp -d)
          
          # Clone the repository to the temporary directory
          git clone https://github.com/quantumhiveinc/website.git $TEMP_DIR
          
          # Create website directory if it doesn't exist
          mkdir -p ~/website
          
          # Ensure proper ownership of the website directory
          sudo chown -R $USER:$USER ~/website
          
          # Copy files from temp directory to website directory
          # Use rsync to preserve permissions and only update changed files
          rsync -av --delete $TEMP_DIR/ ~/website/
          
          # Clean up the temporary directory
          rm -rf $TEMP_DIR
          
          # Ensure all files have proper permissions
          sudo chown -R $USER:$USER ~/website
          
          # Fix Docker permissions
          sudo chmod 666 /var/run/docker.sock
          sudo usermod -aG docker $USER
          
          # Setup required directories with proper permissions
          cd ~/website
          sudo mkdir -p ./letsencrypt
          sudo chmod -R 755 ./letsencrypt
          sudo touch ./letsencrypt/acme.json
          sudo chmod 600 ./letsencrypt/acme.json
          
          # Ensure frontend and traefik directories have proper permissions
          sudo mkdir -p ./frontend ./traefik
          sudo chmod -R 755 ./frontend ./traefik
          sudo chown -R $USER:$USER ./frontend ./traefik
          
          # Deploy with Docker Compose
          cd ~/website
          sudo docker-compose down
          sudo docker-compose up -d --build
          
          # Verify containers are running
          sudo docker ps
        EOF